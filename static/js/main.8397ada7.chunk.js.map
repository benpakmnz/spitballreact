{"version":3,"sources":["components/PostItem.js","App.js","serviceWorker.js","index.js"],"names":["PostItem","props","date","Date","dateTime","toString","split","forematedDat","concat","formatPrice","price","toFixed","react_default","a","createElement","className","href","url","src","userImage","alt","style","votes","color","title","snippet","university","course","views","downloads","App","Data","map","post","src_components_PostItem","key","id","user","image","userName","name","vote","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u0EAuDeA,eAnDE,SAACC,GACd,IAAMC,EAAO,IAAIC,KAAKF,EAAMG,UAAUC,WAAWC,MAAM,KACjDC,EAAY,GAAAC,OAAMN,EAAK,GAAX,KAAAM,OAAiBN,EAAK,GAAtB,MAAAM,OAA6BN,EAAK,IAC9CO,EAAcR,EAAMS,MAAMC,QAAQ,GACxC,OAEAC,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBC,KAAMf,EAAMgB,KACrCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAOH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAC/BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASG,IAAKjB,EAAMkB,UAAWC,IAAI,KAClDR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,cACAH,EAAAC,EAAAC,cAAA,SAAIP,KAIPN,EAAMS,MAAQ,EAAIE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASN,EAAtB,QAA4C,MAInEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBACbM,MAAOpB,EAAMqB,MAAQ,EAAI,CAACC,MAAO,WAAY,OAC5CtB,EAAMqB,MACPV,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAEjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAad,EAAMuB,OAChCZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAEjBH,EAAAC,EAAAC,cAAA,SAAIb,EAAMwB,UAEVb,EAAAC,EAAAC,cAAA,SAAIb,EAAMyB,WAAV,WAAyBzB,EAAM0B,UAIvCf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,8BAAgCH,EAAAC,EAAAC,cAAA,SAAIb,EAAM2B,OACvDhB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAiBH,EAAAC,EAAAC,cAAA,SAAIb,EAAM4B,uBCdrCC,mLAzBb,OACElB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OACXgB,EAAKC,IAAI,SAAAC,GAAI,OACdrB,EAAAC,EAAAC,cAACoB,EAAD,CACEC,IAAOF,EAAKG,GACZnB,IAAKgB,EAAKhB,IACVE,UAAWc,EAAKI,KAAKC,MACrBC,SAAUN,EAAKI,KAAKG,KACpBpC,SAAU6B,EAAK7B,SACfkB,MAAOW,EAAKQ,KAAKnB,MACjBE,MAAOS,EAAKT,MACZC,QAASQ,EAAKR,QACdC,WAAYO,EAAKP,WACjBC,OAAQM,EAAKN,OACbC,MAAOK,EAAKL,MACZC,UAAWI,EAAKJ,UAChBnB,MAAOuB,EAAKvB,kBAlBFgC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8397ada7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './PostItem.css';\r\n\r\n\r\nconst PostItem = (props) => {\r\n    const date = new Date(props.dateTime).toString().split(' ')\r\n    const forematedDat = `${date[1]} ${date[2]}, ${date[3]}`\r\n    const formatPrice = props.price.toFixed(2)\r\n    return(\r\n    \r\n    <li>\r\n    <a className=\"postContainer\" href={props.url}>\r\n        <div className=\"more\"><i className=\"fas fa-ellipsis-v\"></i></div>\r\n            <div className=\"postHeader\">\r\n            <div className=\"headerLeft\">\r\n                <img className=\"avatar\" src={props.userImage} alt=\"\"/>\r\n                <div className=\"postInfo\">\r\n                    <p className=\"spitballer\">SpitBaller</p>\r\n                    <p>{forematedDat}</p>\r\n                </div>\r\n\r\n            </div>\r\n                {props.price > 0 ? <p className=\"price\">{formatPrice} Pts</p>: null}\r\n            \r\n            </div>\r\n            \r\n            <div className=\"mainPost\">\r\n                <div className=\"votesContainer\">\r\n                    <i className=\"fas fa-chevron-up\"\r\n                    style={props.votes > 0 ? {color: '#5C5C5C'}: null}></i>\r\n                    {props.votes}\r\n                    <i className=\"fas fa-chevron-down\"></i>\r\n                </div>\r\n                <div className=\"content\">\r\n                <div className=\"postText\">\r\n                    <div className=\"postTitleRow\">\r\n                        <p className=\"postTitle\">{props.title}</p>\r\n                        <i className=\"far fa-file-alt\"></i>\r\n                    </div>\r\n                    <p>{props.snippet}</p>\r\n                    </div>\r\n                    <p>{props.university} ‚¶Å {props.course}</p>\r\n                </div>\r\n                \r\n            </div>\r\n            <div className=\"statistics\">\r\n            <i className=\"fas fa-cloud-download-alt\"></i><p>{props.views}</p>\r\n            <i className=\"far fa-eye\"></i><p>{props.downloads}</p> \r\n            </div>\r\n\r\n\r\n        </a>\r\n        </li> \r\n    )}\r\n\r\nexport default PostItem;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport PostItem from './components/PostItem';\nimport Data from './assets/data';\n// import {Grid, Paper, Container } from '@material-ui/core';\n\nclass App extends Component {\n  render() {\n  return (\n    <ul className=\"App\">\n      {Data.map(post => \n      <PostItem \n        key = {post.id}\n        url={post.url}\n        userImage={post.user.image}\n        userName={post.user.name}\n        dateTime={post.dateTime}\n        votes={post.vote.votes}\n        title={post.title}\n        snippet={post.snippet}\n        university={post.university}\n        course={post.course}\n        views={post.views}\n        downloads={post.downloads}\n        price={post.price}\n      />\n      )}\n    </ul>\n\n  );\n          }\n}\n\nexport default App;\n\n\n\n\n// class App extends Component {\n//   render() {\n\n//     console.log(Data)\n//   return (\n//     <Container maxWidth=\"sm\" style={{background: `#f0f0f7 url('./assets/Design_desktop.png') no-repeat fixed center`}}>\n//           {Data.map(post =>\n//               <Grid container sm={12}>\n//                 <Grid item>\n//                 {post.dateTime}\n//                 {post.user.name}\n//                 </Grid>\n//                 <Grid item>\n//                 {post.dateTime}\n//                 </Grid>\n              \n//               {/* <p>{post.user.image}</p> */}\n\n//               <p>{post.vote.votes}</p>\n//               <p href={post.url}>\n//                 {post.title}\n//                 {post.snippet}\n//               </p>\n//               <p>{post.university} * {post.course}</p>\n//               <p>{post.views}</p>\n//               <p>{post.downloads}</p> \n//               </Grid>\n//           )}\n\n//     </Container>\n\n//   );\n//           }\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}